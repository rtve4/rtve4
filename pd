
    # 判断此次登录的qq是否为vip或者svip
    # content为markdown语法文本
    content = '\n\n<br/><br/>\n' + '## 财产分析\n'
    custom_print(u'正在判断该账户是否为VIP...')
    data = bot.is_vip_svip()
    isSvip = data['isSvip']
    isVip = data['isSvip']
    if(str(isVip) == '0' and str(isSvip) == '0'):
        content += '此时此刻，我既不是**QQ VIP**，也不是**QQ SVIP**\n'
    elif(str(isVip) != '0' and str(isSvip) != '0'):
        content += '此时此刻，我既是**QQ VIP**，也是**QQ SVIP**\n'
    elif(str(isVip) == '0' and str(isSvip) != '0'):
        content += '此时此刻，我不是**QQ VIP**，但我是**QQ SVIP**\n'
    elif(str(isVip) != '0' and str(isSvip) == '0'):
        content += '此时此刻，我是**QQ VIP**，但不是**QQ SVIP**\n'

    # 获取qb值
    custom_print(u'正在获取该账户的Q币...')
    qb_value = bot.get_qb()
    timeArray = time.localtime()
    otherStyleTime = time.strftime("%Y--%m--%d %H:%M:%S", timeArray)
    content += '截止到**{}**，我剩余的Q币个数为：**{}**个\n\n'.format(otherStyleTime,qb_value)

    # 获取代付信息
    custom_print(u'正在获取该账户的代付信息...')
    pay_list = bot.get_pay_for_another()
    content += '截止到**{}**，我收到的代付信息条数为：**{}**个'.format(otherStyleTime, len(pay_list))
    if(len(pay_list) > 0):
        content += '，它们分别是：\n' + '序号|索要者QQ|索要者昵称|留言内容|索要时间\n:- | :-| :-| :-| :-\n'
        for index, pay_info in enumerate(pay_list):
            if(str(pay_info['fromuin']) != '0'):
                nick = pay_info['nick'].replace('&nbsp;',' ')
                timeArray = time.localtime(int(pay_info['trantime']))
                otherStyleTime = time.strftime("%Y--%m--%d %H:%M:%S", timeArray)
                content += '{}|{}|{}|{}|{}\n'.format(str(index),str(pay_info['fromuin']),nick,str(pay_info['content']),otherStyleTime)

    content += '\n\n'
    # 更新一下欲输出的markdown文本
    markdown_content += content
    # 每个步骤完成后，保存markdown文件，以便防止程序出错时能够保存到最新的数据
    with open('{}的个人QQ历史报告.md'.format(bot.qq_number), 'w', encoding='utf-8') as file:
        file.write(markdown_content)





    # 亲密度排行榜 谁在意我
    custom_print(u'正在分析好友亲密度数据-谁在意我...')
    # content为markdown语法文本
    content = '\n\n<br/><br/>\n' + '## 谁在意我\n'
    data_list = bot.who_care_about_me()
    n = 10
    if(len(data_list) < 10):
        n = len(data_list)

    if (len(data_list) > 0):
        content += '序号|头像|昵称|QQ|亲密度\n:- | :-| :-| :-\n'
        for index, sub_data in enumerate(data_list[:n]):
            uin = sub_data['uin']
            score = sub_data['score']
            name = sub_data['name']
            profile = bot.get_profile_picture(uin, size=40)
            with open('data/' + str(uin) + '.jpg', 'wb') as f:
                f.write(profile)
            content += '{}|![](data/{}.jpg)|{}|{}|{}\n'.format(index, uin, name, uin, score)

        # 更新一下欲输出的markdown文本
        markdown_content += content
        # 每个步骤完成后，保存markdown文件，以便防止程序出错时能够保存到最新的数据
        with open('{}的个人QQ历史报告.md'.format(bot.qq_number), 'w', encoding='utf-8') as file:
            file.write(markdown_content)





    # 亲密度排行榜 我在意谁
    custom_print(u'正在分析好友亲密度数据-我在意谁...')
    # content为markdown语法文本
    content = '\n\n<br/><br/>\n' + '## 我在意谁\n'
    data_list = bot.i_care_about_who()
    n = 10
    if(len(data_list) < 10):
        n = len(data_list)

    if (len(data_list) > 0):
        content += '序号|头像|昵称|QQ|亲密度\n:- | :-| :-| :-\n'
        for index, sub_data in enumerate(data_list[:n]):
            uin = sub_data['uin']
            score = sub_data['score']
            name = sub_data['name']
            profile = bot.get_profile_picture(uin, size=40)
            with open('data/' + str(uin) + '.jpg', 'wb') as f:
                f.write(profile)
            content += '{}|![](data/{}.jpg)|{}|{}|{}\n'.format(index, uin, name, uin, score)

        # 更新一下欲输出的markdown文本
        markdown_content += content
        # 每个步骤完成后，保存markdown文件，以便防止程序出错时能够保存到最新的数据
        with open('{}的个人QQ历史报告.md'.format(bot.qq_number), 'w', encoding='utf-8') as file:
            file.write(markdown_content)



    # 每个步骤完成后，保存markdown文件，以便防止程序出错时能够保存到最新的数据
    with open('{}的个人QQ历史报告.md'.format(bot.qq_number), 'w', encoding='utf-8') as file:
        file.write(markdown_content)

    custom_print(u'所有数据获取完毕, 并在当前工作目录下生成了一份报告文件:[{}的个人QQ历史报告.md]'.format(bot.qq_number))
    custom_print(u'该文件为markdown格式, 请下载typora软件以便查看该文件, 下载地址为https://typora.io/')
